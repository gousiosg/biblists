@article{GS12a,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Journal = {Empirical Software Engineering},
  Month = Nov,
  Note = {Under review},
  Title = {Conducting Quantitative Software Engineering Studies with {A}litheia {C}ore},
  Year = 2012,
  abstract={Quantitative empirical software engineering research benefits mightily from processing large open source software repository data sets. The diversity of repository management tools and the long history of some projects, renders the task of working those datasets a tedious and error-prone exercise. The Alitheia Core analysis platform preprocesses repository data into an intermediate format that allows researchers to provide custom analysis tools. Alitheia Core automatically distributes the processing load on multiple processors while enabling programmatic access to the raw data, the metadata, and the analysis results. The tool has been successfully applied on hundreds of medium to large-sized open-source projects, enabling large-scale empirical studies.}
}

@article{MSGS11,
  Author = {Dimitrios Mitropoulos and Konstantinos Stroggylos and Georgios Gousios and Diomidis Spinellis},
  Journal = {International Journal of Information Security},
  Month = Apr,
  Note = {Under review},
  Title = {Protecting Web Users from {J}avaScript Injection Attacks},
  Year = 2012,
  abstract={Cross-site scripting (XSS) is one of the most common security vulnerabilities. It affects either web users on the client-side or web applications and their operators on the server-side. Most XSS exploits involve one basic vector: JavaScript. Adversaries find new ways to inject malicious scripts in the user’s browser by using a variety of techniques, despite the various counter-measures that have been introduced. This paper proposes a novel scheme to detect JavaScript injection attacks through a security module in the browser’s JavaScript engine. To detect an attack, our scheme uses location-specific signatures to distinguish between injected and legitimate JavaScript code fragments. These signatures are unique identifiers that represent specific characteristics of a JavaScript code statement and its execution context. To verify our scheme we have developed a prototype and tested it successfully against an extensive array of attacks.}
}

@inproceedings{MG12,
  Author = {Erik Meijer and Georgios Gousios},
  Title = {Six ways to understand monads: Experiences from the functional programming course at TU Delft},
  Year = 2012,
  Month = Nov,
  Note = {Submitted to the ICSE software engineering education track},
  abstract={In the last few years, the popularity of functional programming as a way of solving computational problems has increased significantly. While most computer science curricula do include a course on functional programming, in many cases it is disconnected from practical applications, which is precisely where functional programming shines. To fill in this gap, we designed a functional programming course that required students to learn by experience with real world applications. In this paper, we present the course’s design and outline our experience from delivering it.}
}
