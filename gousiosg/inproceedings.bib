@inproceedings{MKLGS13,
  Author = {Dimitris Mitropoulos and Vassilios Karakoidas and Panos Louridas and Georgios Gousios and Diomidis Spinellis},
  Title = {Dismal Code: Studying the Evolution of Security Bugs},
  Year = 2013,
  Month = Oct,
  Booktitle = {{LASER} '13: Proceedings of the 2013 Workshop on Learning from Authoritative Security Experiment Results},
  Location = {Washington D.C., VA},
  abstract = { Security bugs are critical programming errors that can lead to
  serious vulnerabilities in software. Such bugs may allow an attacker to take
  over an application, steal data or prevent the application from working at
  all.  We used the projects stored in the Maven repository to study the
  characteristics of security bugs individually and in relation to other
  software bugs. Specifically, we studied the evolution of security bugs through
  time. In addition, we examined their persistence and their relationship with
  a) the size of the corresponding version, and b) other bug categories.  We
  analyzed every project version of the Maven repository by using FindBugs, a
  popular static analysis tool.  To see how security bugs evolve over time we
  took advantage of the repository's project history and dependency data.  Our
  results indicate that there is no simple rule governing the number of security
  bugs as a project evolves.  In particular, we cannot say that across projects
  security-related defect counts increase or decrease significantly over time.
  Furthermore, security bugs are not eliminated in a way that is particularly
  different from the other bugs. In addition, the relation of security bugs
  with a project's size appears to be different from the relation of the bugs
  coming from other categories.  Finally, even if bugs seem to have similar
  behaviour, severe security bugs seem to be unassociated with other bug
  categories.  Our findings indicate that further research should be done to
  analyze the evolution of security bugs. Given the fact that our experiment
  included only Java projects, similar research could be done for another
  ecosystem. Finally, the fact that projects have their own idiosyncrasies
  concerning security bugs, could help us find the common characteristics of the
  projects where security bugs increase over time. },
  url = {/pub/evolution-security-bugs.pdf}
}


@inproceedings{G13,
  Author = {Georgios Gousios},
  Title = {The {GHT}orrent dataset and tool suite},
  Year = 2013,
  Month = May,
  Booktitle = {{MSR} '13: Proceedings of the 9th Working Conference on Mining Software Repositories},
  Location = {San Francisco, CA},
  abstract = {A common requirement of many empirical software engineering studies is the acquisition and curation of data from software repositories. During the last few years, GitHub has emerged as a popular project hosting, mirroring and collaboration platform. GitHub provides an extensive REST API, which enables researchers to retrieve both the commits to the projects’ repositories and events generated through user actions on project resources. GHTorrent aims to create a scalable off line mirror of GitHub’s event streams and persistent data, and offer it to the research community as a service. In this paper, we present the project’s design and initial implementation and demonstrate how the provided datasets can be queried and processed.},
  url = {/pub/ghtorrent-dataset-toolsuite.pdf},
  speakerdeck = "75bea5909fbb0130f0eb364613f6f036",
  award = {MSR2013: Best data showcase paper}
}

@inproceedings{MGS12,
  Title="Measuring the Occurrence of Security-Related Bugs through Software
    Evolution",
  Author="Dimitris Mitropoulos and Georgios Gousios and Diomidis
    Spinellis",
  Booktitle="PCI 2012: Proceedings of 16th Panhellenic Conference on
    Informatics (PCI 2012)",
  Publisher="IEEE Computer Society",
  Year = 2012,
  Pages = {117--122},
  abstract = "A security-related bug is a programming error that intro- duces a
    potentially exploitable weakness into a computer system. This weakness could
    lead to a security breach with unfortunate consequences. Version control
    systems provide an accurate historical record of the software code’s evolu-
    tion. In this paper we examine the frequency of the security-related bugs
    throughout the evolution of a software project by applying the FindBugs static
    analyzer on all versions of its revision history. We have applied our approach
    on four projects and we have come out with some interesting results including
    the fact that the number of the security-related bugs increase as the project
    evolves.",
  url = {/pub/measuring-the-occurrence-of-security-related-bugs-through-software-evolution.pdf}
}

@inproceedings{GS12,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = {{MSR} '12: Proceedings of the 9th Working Conference on Mining Software Repositories},
  Editor = {Michael W. Godfrey and Jim Whitehead},
  Location = {Zurich, Switzerland},
  Month = jun,
  Pages = {12--21},
  Publisher = {IEEE},
  Title = {{GHT}orrent: {G}it{H}ub's Data from a Firehose},
  Year = 2012,
  doi = {10.1109/MSR.2012.6224294}, 
  ISSN = {2160-1852},
  SlideshareEmbed = "13184524",
  abstract = {A common requirement of many empirical software engineering studies is the acquisition and curation of data from software repositories. During the last few years, GitHub has emerged as a popular project hosting, mirroring and collaboration platform. GitHub provides an extensive REST API, which enables researchers to retrieve both the commits to the projects’ repositories and events generated through user actions on project resources. GHTorrent aims to create a scalable off line mirror of GitHub’s event streams and persistent data, and offer it to the research community as a service. In this paper, we present the project’s design and initial implementation and demonstrate how the provided datasets can be queried and processed.},
  url = {/pub/ghtorrent-githubs-data-from-a-firehose.pdf}
}

@inproceedings{KGSP09,
  Author = {Eirini Kalliamvakou and Georgios Gousios and Diomidis Spinellis and Nancy Pouloudi},
  Booktitle = {MCIS 2009: 4th {M}editerranean Conference on Information Systems},
  Editor = {Poulymenakou, A. and Pouloudi, N. and Pramatari, K.},
  Location = {Athens, Greece},
  Month = sep,
  Pages = {600--611},
  Title = {Measuring Developer Contribution from Software Repository Data},
  Year = 2009,
  abstract = {Our work is concerned with an enriched perspective of what constitutes developer contribution in software infrastructures supporting incremental development and distributed software projects. We use the term “contribution” to express the combination of all the actions a developer has performed during the development process and propose a model for calculating this individually for developers participating in a software project. Our approach departs from the traditional practice of only measuring the contribution to the final outcome (the code) and puts emphasis additionally on other activities that do not directly affect the product itself but are essential to the development process. We use the Open Source Software (OSS) context to take advantage of the public availability of data in software repositories. In this paper, we present our method of calculation and its system implementation and we apply our measurements on various projects from the GNOME ecosystem.},
  Url = {/pub/measuring-developer-contribution-from-software-repository-data.pdf}
}

@inproceedings{GS09a,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = {{ICSE} '09: Proceedings of the 31st International Conference on Software Engineering -- Formal Research Demonstrations Track},
  Day = {16--24},
  Isbn = {978-1-4244-3743-6},
  Location = {Vancouver, Canada},
  Month = may,
  Pages = {579--582},
  Publisher = {IEEE},
  Title = {Alitheia Core: An extensible software quality monitoring platform},
  Year = {2009},
  abstract = {Research in the fields of software quality and maintain- ability requires the analysis of large quantities of data, which often originate from open source software projects. Pre-processing data, calculating metrics, and synthesizing composite results from a large corpus of project artefacts is a tedious and error prone task lacking direct scientific value. The Alitheia Core tool is an extensible platform for software quality analysis that is designed specifically to fa- cilitate software engineering research on large and diverse data sources, by integrating data collection and preprocess- ing phases with an array of analysis services, and present- ing the researcher with an easy to use extension mechanism. The system has been used to process several projects suc- cessfully, forming the basis of an emerging ecosystem of quality analysis tools.},
  url = {/pub/alitheia-core-extensible-software-quality-monitoring-platform.pdf}
}

@inproceedings{GS09b,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = {{MSR} '09: Proceedings of the 6th Working Conference on Mining Software Repositories},
  Day = {16--17},
  Editor = {Michael W. Godfrey and Jim Whitehead},
  Isbn = {978-1-4244-3493-0},
  Location = {Vancouver, Canada},
  Month = may,
  Pages = {31--40},
  Publisher = {IEEE},
  Title = {A platform for software engineering research},
  Year = 2009,
  abstract = {Research in the fields of software quality, maintainabil- ity and evolution requires the analysis of large quantities of data, which often originate from open source software projects. Collecting and preprocessing data, calculating metrics, and synthesizing composite results from a large corpus of project artifacts is a tedious and error prone task lacking direct scientific value. The Alitheia Core tool is an extensible platform for software quality analysis that is designed specifically to facilitate software engineering research on large and diverse data sources, by integrating data collection and preprocessing phases with an array of analysis services, and presenting the researcher with an easy to use extension mechanism. Alitheia Core aims to be the basis of an ecosystem of shared tools and research data that will enable researchers to focus on their research questions at hand, rather than spend time on re-implementing analysis tools.

    In this paper, we present the Alitheia Core platform in detail and demonstrate its usefulness in mining software repositories by guiding the reader through the steps required to execute a simple experiment.},
  url = {/pub/a-platform-for-software-engineering-research.pdf}
}

@inproceedings{GS08,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = {Proceedings of the 12th Pan-Hellenic Conference on Informatics},
  Title = {Java Performance Evaluation Using External Instrumentation},
  Year = 2008,
  Location = {Samos, Greece},
  Month = {August},
  abstact = {The performance of programs written in the Java pro- gramming language is not trivial to analyse. The Java Vir- tual Machine hides the details of bytecode execution while not providing an accessible profiling mechanism. Most tools used for Java performance evaluations are based on sampling and only present engineers with sampled data aggregations. In this paper, we present the Java DTrace Toolkit, a collection of scripts that is specifically designed to assist engineers in identifying the roots of various perfor- mance problems observed with other tools.},
  url = {/pub/java-performance-evaluation-using-external-instrumentation.pdf}
}

@inproceedings{SGSS08,
  Address = {Boston},
  Author = {Ioannis Samoladas and Georgios Gousios and Diomidis Spinellis and Ioannis Stamelos},
  Booktitle = {Open Source Development, Communities and Quality --- {OSS} 2008: 4th International Conference on Open Source Systems},
  Editor = {Ernesto Damiani and Giancarlo Succi},
  Location = {Milan, Italy},
  Month = sep,
  Organization = {IFIP 20th World Computer Congress, Working Group 2.3 on Open Source Software},
  Pages = {237--248},
  Publisher = {Springer},
  Title = {The {SQO-OSS} Quality Model: Measurement Based Open Source Software Evaluation},
  Year = {2008},
  abstract = {Software quality evaluation has always been an important part of software business. The quality evaluation process is usually based on hierarchical quality models that measure various aspects of software quality and deduce a characterization of the product quality being evaluated. The particular nature of open source software has rendered existing models unsuitable for detailed quality evaluations. In this paper, we present a hierarchical quality model that evaluates source code and community processes, based on automatic calculation of metric values and correlation of those to a set of predefined quality profiles.},
  url = {/pub/sqo-oss-quality-model-measurement-based-open-source-software-evaluation.pdf}
}

@inproceedings{GKS08,
  Address = {New York, NY, USA},
  Author = {Georgios Gousios and Eirini Kalliamvakou and Diomidis Spinellis},
  Booktitle = {MSR '08: Proceedings of the 2008 International Working Conference on Mining Software Repositories},
  Isbn = {978-1-60558-024-1},
  Location = {Leipzig, Germany},
  Pages = {129--132},
  Publisher = {ACM},
  Title = {Measuring developer contribution from software repository data},
  Year = {2008},
  abstract = {Apart from source code, software infrastructures supporting agile and distributed software projects contain traces of developer activity that does not directly affect the product itself but is important for the development process. We propose a model that, by combining traditional contribution metrics with data mined from software repositories, can deliver accurate developer contribution measurements. The model creates clusters of similar projects to extract weights that are then applied to the actions a developer performed on project assets to extract a combined measurement of the developer’s contribution. We are currently implementing the model in the context of a software quality monitoring system while we are also validating its components by means of questionnaires.},
  url = {/pub/measuring-developer-contribution-from-repository-data.pdf}
}

@inproceedings{G07,
  Author = {Georgios Gousios},
  Booktitle = {Companion to the 22nd ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications (OOPSLA)},
  Location = {Montreal, Canada},
  Month = {Oct 21-25},
  Title = {The {J}ikes{X}en {J}ava Server Platform},
  Year = {2007},
  url = {/pub/jikesxen.pdf},
  abstract = {The purpose of the JVM is to abstract the Java language from the
    hardware and software platforms it runs on. For this rea- son, the JVM uses
      services offered by the host operating sys- tem in order to implement
      identical services for the Java lan- guage. The obvious duplication of effort
      in service provision and resource management between the JVM and the operat-
      ing system has a measurable cost on the performance of Java programs. In my
      PhD research, I try to find ways of min- imizing the cost of sharing resources
      between the OS and the JVM, by identifying and removing unnecessary software
      layers.}
}

@inproceedings{GKSLVS07,
  Author = {Georgios Gousios and Vassilios Karakoidas and Konstantinos Stroggylos and Panagiotis Louridas and Vasileios Vlachos and Diomidis Spinellis},
  Booktitle = {Proceedings of the 11th Panhellenic Conference on Informatics},
  Day = {18--20},
  Location = {Patras, Greece},
  Month = may,
  Title = {Software Quality Assessment of Open Source Software},
  Year = {2007},
  abstract = {The open source software ecosystem comprises more than a hundred thousand applications of varying quality. Individuals and organizations wishing to use open source software packages have scarce objective data to evaluate their quality. However, open source development projects by definition allow anybody to read, and therefore evaluate their source code. In addition, most projects also publish process-related artefacts, such as bug databases, mailing lists, and configuration management system logs. The software quality observatory is a platform that uses these product and process data sources to automatically evaluate the quality of open source projects. A plugin-based service-oriented architecture allows the mixing and matching of metrics extraction suites, source code repositories, and transformation filters. The resulting platform is aimed at IT consultants and managers, the open source community, and researchers.},
  url = {/pub/software-quality-assessment-of-open-source-software.pdf}
}

@inproceedings{GKS06,
  Author = {Georgios Gousios and Vassilios Karakoidas and Diomidis Spinellis},
  Booktitle = {Proceedings of the 5th International System Administration and Network Engineering Conference SANE 06},
  Day = {18--19},
  Editor = {Alexios Zavras},
  Location = {Delft, The Netherlands},
  Month = may,
  Organization = {NLUUG},
  Pages = {69--83},
  Publisher = {Stichting SANE},
  Title = {Tuning {J}ava's memory manager for high performance server applications},
  Year = {2006},
  Url = {/pub/paper.pdf},
  abstract = {Java is a strong player in the application server market and thus the performance of its virtual machine is an important aspect of a server's performance. One of the components that affect the performance of a {\sc jvm} is the memory manager, which also includes the garbage collector. Modern virtual machines offer a multitude of options for tuning the memory manager, which can have a significant impact on server application performance. 

    In this paper, we examine the effect of tuning the garbage collection in an application server environment. By employing both synthetic and real world application benchmarks, we assess the various garbage collection strategies offered by two popular virtual machines. Finally, we present a comprehensive list of generally applicable garbage collection guidelines.}
}

@inproceedings{GS02,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = {Proceedings of the 3rd International System Administration and Networking Conference {SANE 2002}},
  Location = {Maastricht, The Netherlands},
  Month = may,
  Note = {Best refereed paper award},
  Pages = {103--119},
  Title = {A Comparison of Portable Dynamic Web Content Technologies for the Apache Web Server},
  Year = 2002,
  award = {SANE2002: Best refereed paper award},
  url = {/pub/comparison-of-portable-dynamic-web-content-technology-apache.pdf}
}
