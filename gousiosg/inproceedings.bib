@inproceedings{BGPZ15,
  author = {Moritz Beller and Georgios Gousios and Annibale Panichella and Andy Zaidman},
  title = {When, How, And Why Developers (Do Not) Test},
  booktitle = {Submitted to the the 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering},
  year = {2015},
  Abstract = {
    The research community in Software Engineering and Software Testing in
particular builds many of its contributions on a set of mutually shared
expectations. These expectations often form the motivation for research on the
creation of new testing tools and the refinement of existing test processes in
an attempt to support practitioners. Despite the fact that they are the basis
for many publications as well as open-source and commercial testing
applications, the common expectations and beliefs are rarely ever questioned.
For example, Frederic Brooks' statement that testing takes half of the
development time seems to have manifested itself within the community since he
first made it in the ``Mythical Man Month'' in 1975. With this paper, we report
on the surprising results of a large-scale field study with 416 software
engineers whose development activity we closely monitored over the course of
five months, resulting in over 13 years of recorded work time. Our findings
question several commonly shared assumptions and beliefs about testing and might
be contributing factors to the observed bug proneness of software in practice:
the majority of developers in our study does not test; developers rarely run
their tests in the IDE; Test-driven Development is not widely practiced; and,
last but not least, software developers only spend a quarter of their work time
engineering tests, whereas they think they test half of their time.
   }
}

@inproceedings{GZSD15,
  author = {Gousios, Georgios and Zaidman, Andy and Storey, Margaret-Anne and Deursen, Arie van},
  title = {Work Practices and Challenges in Pull-Based Development: The Integrator’s Perspective},
  booktitle = {Proceedings of the 37th International Conference on Software Engineering},
  series = {ICSE 2015},
  year = {2015},
  location = {Florence, Italy},
  Abstract = {
    In the pull-based development model, the integrator has the crucial role of
    managing and integrating contributions. This work focuses on the role of
    the integrator and investigates working habits and challenges alike. We set
    up an exploratory qualitative study involving a large-scale survey of 749
    integrators, to which we add quantitative data from the integrator's
    project.  Our results provide insights into the factors they consider in
    their decision making process to accept or reject a contribution. Our key
    findings are that integrators struggle to maintain the quality of their
    projects and have difficulties with prioritizing contributions that are to
    be merged.  Our insights have implications for practitioners who wish to
    use or improve their pull-based development process, as well as for
    researchers striving to understand the theoretical implications of the
    pull-based model in software development.},
  url = {/pub/pullreqs-integrators.pdf},
  Note = {To appear}
}

@inproceedings{CAGD15,
  author = {Roberta Coelho and Lucas Almeida and Georgios Gousios and Arie van
  Deursen},
  title = {Unveiling Exception Handling Bug Hazards in Android based on GitHub and Google Code Issues},
  booktitle = {Proceedings of the 12th International Conference on Mining
  Software Repositories},
  year = {2015},
  location = {Florence, Italy},
  Abstract = {This paper reports on a study mining the exception stack traces included in 159,048 issues reported on Android projects hosted in GitHub (482 projects) and Google Code (157 projects). The goal of this study is to investigate whether stack trace information can reveal bug hazards related to exception handling code that may lead to a decrease in application robustness. Overall 6,005 exception stack traces were extracted, and subjected to source code and bytecode analysis. The outcomes of this study include the identification of the following bug hazards: (i) unexpected cross-type exception wrappings (for instance, trying to handle an instance of OutOfMemoryError ``hidden'' in a checked exception) which can make the exception-related code more complex and negatively impact the application robustness; (ii) undocumented runtime exceptions thrown by both the Android platform and third party libraries; and (iii) undoc- umented checked exceptions thrown by the Android Platform. Such undocumented exceptions make difficult, and most of the times infeasible for the client code to protect against unforeseen situations that may happen while calling third-party code. This study provides further insights on such bug hazards and the robustness threats they impose to Android apps as well as to other systems based on the Java exception model.},
  url = {/pub/android-stacks.pdf},
  Note = {To appear}
}

@inproceedings{DBGCD15,
  author = {Martin Dias and Alberto Bacchelli and Georgios Gousios and Damien Cassou and Stephane Ducasse},
  title = {Untangling Fine-Grained Code Changes},
  booktitle = {Proceedings of the 22nd IEEE International Conference on Software Analysis, Evolution, and Reengineering},
  Year = {2015},
  series = {SANER 2015},
  year = {2015},
  location = {Montreal, Canada},
  Abstract = {After working for some time, developers commit their code changes
  to a version control system. When doing so, research shows that they often
  bundle unrelated changes (e.g., bug fix and refactoring) in a single commit,
  thus creating a so-called tangled commit. Sharing tangled commits is
  problematic because it makes review, reversion, and integration of these
  commits harder and historical analyses of the project less reliable.
  Researchers have worked at untangling existing commits, i.e., finding which
  part of a commit relates to which task. In this paper, we contribute to this
  line of work in two ways: (1) A publicly available dataset of untangled code
  changes, created with the help of two developers who accurately split their
  code changes into self contained tasks over a period of four months; (2) based
  on this dataset we devise and assess EpiceaUntangler, an approach to help
  developers share untangled commits (aka. atomic commits) by using fine-grained
  code change information. We further evaluate EpiceaUntangler by deploying it
  to 7 developers, who used it for 2 weeks. We recorded a median success rate of
  91\% and average one of 75\%, in automatically creating clusters of untangled
  fine-grained code changes.},
  url = {/pub/fine-untangling.pdf},
  Note = {To appear},
  award = {nomination for the SANER best paper}
}

@inproceedings{HG15,
  author = {Claudia Hauff and Georgios Gousios},
  title = {Matching GitHub developer profiles to job advertisements},
  booktitle = {Proceedings of the 12th International Conference on Mining
  Software Repositories},
  year = {2015},
  location = {Florence, Italy},
  Abstract = {GitHub is a social coding platform that enables developers to efficiently work on projects, connect with other developers, collaborate and generally ``be seen'' by the community. This visibility also extends to prospective employers and HR personnel who may use GitHub to learn more about a developer’s skills and interests. We propose a pipeline that automatizes this process and automatically suggests matching job advertisements to developers, based on signals extracting from their activities on GitHub.},
  url = {/pub/dev-profiles.pdf},
  Note = {To appear}
}

@inproceedings{VGZ15,
  author = {Erik van der Veen and Georgios Gousios and Andy Zaidman},
  title = {Automatically Prioritizing Pull Requests},
  booktitle = {Proceedings of the 12th International Conference on Mining
  Software Repositories},
  year = {2015},
  location = {Florence, Italy},
  Abstract = {In previous work, we observed that in the pull-based development model integrators face challenges with regard to prioritizing work in the face of multiple concurrent pull requests. We present the design and initial implementation of a prototype pull request prioritisation tool called PRioritizer. PRioritizer works like a priority inbox for pull requests, recommending the top pull requests the project owner should focus on. A preliminary user study showed that PRioritizer provides functionality that GitHub is currently lacking, even though users need more insight into how the priority ranking is established to make PRioritizer really useful.},
  url = {/pub/prioritizer.pdf},
  Note = {To appear}
}

@inproceedings{GPD14,
  author = {Gousios, Georgios and Pinzger, Martin and Deursen, Arie van},
  title = {An Exploratory Study of the Pull-based Software Development Model},
  booktitle = {Proceedings of the 36th International Conference on Software Engineering},
  Year = {2014},
  series = {ICSE 2014},
  isbn = {978-1-4503-2756-5},
  location = {Hyderabad, India},
  pages = {345--355},
  numpages = {11},
  doi = {10.1145/2568225.2568260},
  acmid = {2568260},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Pull-based development, distributed software development, empirical software engineering, pull request},
  Abstract = {The advent of distributed version control systems has led to the
  development of a new paradigm for distributed software development; instead of
  pushing changes to a central repository, developers pull them from other
  repositories and merge them locally. Various code hosting sites, notably
  Github, have tapped on the opportunity to facilitate pull-based development by
  offering workflow support tools, such as code reviewing systems and integrated
  issue trackers. In this work, we explore how pull-based software development
  works, first on the GHTorrent corpus and then on a carefully selected sample
  of 291 projects. We find that the pull request model offers fast turnaround,
  increased opportunities for community engagement and decreased time to
  incorporate contributions. We show that a relatively small number of factors
  affect both the decision to merge a pull request and the time to process it.
  We also examine the reasons for pull request rejection and find that technical
  ones are only a small minority.},
 speakerdeck = "2c6de050ce430131e1db2aa9d004a740",
  url = {/pub/exploration-pullreqs.pdf},
  award = {nomination for the ACM SIGSOFT best paper}
}

@inproceedings{GVSZ14,
  author = {Gousios, Georgios and Vasilescu, Bogdan and Serebrenik, Alexander and Zaidman, Andy},
  title = {Lean {GHT}orrent: GitHub Data on Demand},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  series = {MSR 2014},
  year = {2014},
  isbn = {978-1-4503-2863-0},
  location = {Hyderabad, India},
  pages = {384--387},
  numpages = {4},
  doi = {10.1145/2597073.2597126},
  acmid = {2597126},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {GitHub, data on demand, dataset},
  Abstract = {In recent years, Github has become the largest code host in the
  world, with more than 5M developers collaborating across 10M repositories.
  Numerous popular open source projects (such as Ruby on Rails, Homebrew,
  Bootstrap, Django or JQuery) have chosen Github as their host and have
  migrated their code base to it. Github offers a tremendous research potential.
  For instance, it is a flagship for current open source development, a place
  for developers to showcase their expertise to peers or potential recruiters,
  and the platform where social coding features or pull requests emerged.
  However, Github data is, to date, largely underexplored. To facilitate
  studies of Github, we have created GHTorrent, a scalable, queriable, offline
  mirror of the data offered through the Github REST API. In this paper we
  present a novel feature of GHTorrent designed to offer customisable data
  dumps on demand. The new GHTorrent data-on-demand service offers users the
  possibility to request via a web form up-to-date GHTorrent data dumps for
  any collection of Github repositories. We hope that by offering customisable
  GHTorrent data dumps we will not only lower the "barrier for entry" even
  further for researchers interested in mining Github data (thus encourage
  researchers to intensify their mining efforts), but also enhance the
  replicability of Github studies (since a snapshot of the data on which the
  results were obtained can now easily accompany each study).},
  url = {/pub/lean-ghtorrent.pdf},
  speakerdeck = "992bb730cd090131fa3126624a8aace7"
}

@inproceedings{GZ14,
  author = {Gousios, Georgios and Zaidman, Andy},
  title = {A Dataset for Pull-based Development Research},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  series = {MSR 2014},
  year = {2014},
  isbn = {978-1-4503-2863-0},
  location = {Hyderabad, India},
  pages = {368--371},
  numpages = {4},
  doi = {10.1145/2597073.2597122},
  acmid = {2597122},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {distributed software development, empirical software engineering, pull request, pull-based development},
  Abstract = {Pull requests form a new method for collaborating in distributed
  software development. To study the pull request distributed development model,
  we constructed a dataset of almost 900 projects and 350,000 pull requests,
  including some of the largest users of pull requests on Github. In this paper,
  we describe how the project selection was done, we analyze the selected
  features and present a machine learning tool set for the R statistics
  environment.},
  url = {/pub/pullreqs-dataset.pdf},
  award = {MSR2014: Best data showcase paper},
  speakerdeck = "629aa910cd09013116791efd7f77c4b7"
}

@inproceedings{MKLGS14,
  author = {Mitropoulos, Dimitris and Karakoidas, Vassilios and Louridas, Panos and Gousios, Georgios and Spinellis, Diomidis},
  title = {The Bug Catalog of the Maven Ecosystem},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  series = {MSR 2014},
  year = {2014},
  isbn = {978-1-4503-2863-0},
  location = {Hyderabad, India},
  pages = {372--375},
  numpages = {4},
  doi = {10.1145/2597073.2597123},
  acmid = {2597123},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {FindBugs, Maven Repository, Software Bugs}, 
  Abstract = {Examining software ecosystems can provide the research community with data regarding artifacts, processes, and communities. We present a dataset obtained from the Maven central repository ecosystem (approximately 265{GB} of data) by statically analyzing the repository to detect potential software bugs. For our analysis we used {F}indBugs, a tool that examines Java bytecode to detect numerous types of bugs. The dataset contains the metrics results that Find- Bugs reports for every project version (a jar) included in the ecosystem. For every version we also stored specific metadata such as the jar’s size, its dependencies and others. Our dataset can be used to produce interesting research results, as we show in specific examples.},
  url = {/pub/maven-findbugs.pdf},
}

@inproceedings{KGBSGD14,
  author = {Kalliamvakou, Eirini and Gousios, Georgios and Blincoe, Kelly and Singer, Leif and German, Daniel M. and Damian, Daniela},
  title = {The Promises and Perils of Mining GitHub},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  series = {MSR 2014},
  year = {2014},
  isbn = {978-1-4503-2863-0},
  location = {Hyderabad, India},
  pages = {92--101},
  numpages = {10},
  doi = {10.1145/2597073.2597074},
  acmid = {2597074},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Mining software repositories, bias, code reviews, git, github},
  Abstract = {With over 10 million Git repositories, GitHub is becoming one of the most important source of software artifacts on the Internet. Researchers are starting to mine the information stored in GitHub's event logs, trying to understand how its users employ the site to collaborate on software. However, so far there have been no studies describing the quality and properties of the data available from GitHub. We document the results of an empirical study aimed at understanding the characteristics of the repositories in GitHub and how users take advantage of GitHub's main features---namely commits, pull requests, and issues. Our results indicate that, while GitHub is a rich source of data on software development, mining GitHub for research purposes should take various potential perils into consideration. We show, for example, that the majority of the projects are personal and inactive; that GitHub is also being used for free storage and as a Web hosting service; and that almost 40\% of all pull requests do not appear as merged, even though they were. We provide a set of recommendations for software engineering researchers on how to approach the data in GitHub.},
  url = {/pub/promises-perils-github.pdf},
}

@inproceedings{MKPLGS14,
    author = {Dimitris Mitropoulos and Georgios Gousios and Panagiotis Papadopoulos and Vassilios Karakoidas and Panos Louridas and Diomidis Spinellis},
    title = {The Vulnerability Dataset of a Large Software Ecosystem},
    booktitle = {Proceedings of the 3rd International Workshop on Building Analysis Datasets and Gathering Experience Returns for Security},
    year = {2014},
    month = {September},
    location = {Wroclaw, Poland},
    publisher = {IEEE Computer Society},
  url = {/pub/maven-bug-dataset.pdf}
}

@inproceedings{MKLGS13,
  Author = {Dimitris Mitropoulos and Vassilios Karakoidas and Panos Louridas and Georgios Gousios and Diomidis Spinellis},
  Title = {Dismal Code: Studying the Evolution of Security Bugs},
  Year = 2013,
  Month = Oct,
  Booktitle = { {LASER} '13: Proceedings of the 2013 Workshop on Learning from Authoritative Security Experiment Results},
  Location = {Washington D.C., VA},
  abstract = { Security bugs are critical programming errors that can lead to
    serious vulnerabilities in software. Such bugs may allow an attacker to take
      over an application, steal data or prevent the application from working at
      all.  We used the projects stored in the Maven repository to study the
      characteristics of security bugs individually and in relation to other
      software bugs. Specifically, we studied the evolution of security bugs through
      time. In addition, we examined their persistence and their relationship with
      a) the size of the corresponding version, and b) other bug categories.  We
      analyzed every project version of the Maven repository by using FindBugs, a
      popular static analysis tool.  To see how security bugs evolve over time we
      took advantage of the repository's project history and dependency data.  Our
      results indicate that there is no simple rule governing the number of security
      bugs as a project evolves.  In particular, we cannot say that across projects
      security-related defect counts increase or decrease significantly over time.
      Furthermore, security bugs are not eliminated in a way that is particularly
      different from the other bugs. In addition, the relation of security bugs
      with a project's size appears to be different from the relation of the bugs
      coming from other categories.  Finally, even if bugs seem to have similar
      behaviour, severe security bugs seem to be unassociated with other bug
      categories.  Our findings indicate that further research should be done to
      analyze the evolution of security bugs. Given the fact that our experiment
      included only Java projects, similar research could be done for another
      ecosystem. Finally, the fact that projects have their own idiosyncrasies
      concerning security bugs, could help us find the common characteristics of the
      projects where security bugs increase over time. },
  url = {/pub/evolution-security-bugs.pdf}
}

@inproceedings{G13,
  Author = {Georgios Gousios},
  Title = {The {GHT}orrent dataset and tool suite},
  Year = 2013,
  Month = May,
  pages = {233--236},
  numpages = {4},
  Booktitle = {Proceedings of the 10th Working Conference on Mining Software Repositories},
  series = {MSR '13},
  isbn = {978-1-4673-2936-1},
  location = {San Francisco, CA, USA},
  abstract = {A common requirement of many empirical software engineering studies is the acquisition and curation of data from software repositories. During the last few years, GitHub has emerged as a popular project hosting, mirroring and collaboration platform. GitHub provides an extensive REST API, which enables researchers to retrieve both the commits to the projects’ repositories and events generated through user actions on project resources. GHTorrent aims to create a scalable off line mirror of GitHub’s event streams and persistent data, and offer it to the research community as a service. In this paper, we present the project’s design and initial implementation and demonstrate how the provided datasets can be queried and processed.},
  url = {/pub/ghtorrent-dataset-toolsuite.pdf},
  speakerdeck = "75bea5909fbb0130f0eb364613f6f036",
  award = {MSR2013: Best data showcase paper},
  Note = {Best data showcase paper award}
}

@inproceedings{MGS12,
  Title="Measuring the Occurrence of Security-Related Bugs through Software
    Evolution",
  Author="Dimitris Mitropoulos and Georgios Gousios and Diomidis
    Spinellis",
  Booktitle="PCI 2012: Proceedings of 16th Panhellenic Conference on
    Informatics (PCI 2012)",
  Publisher="IEEE Computer Society",
  Year = 2012,
  Pages = {117--122},
  abstract = "A security-related bug is a programming error that intro- duces a
    potentially exploitable weakness into a computer system. This weakness could
    lead to a security breach with unfortunate consequences. Version control
    systems provide an accurate historical record of the software code’s evolu-
    tion. In this paper we examine the frequency of the security-related bugs
    throughout the evolution of a software project by applying the FindBugs static
    analyzer on all versions of its revision history. We have applied our approach
    on four projects and we have come out with some interesting results including
    the fact that the number of the security-related bugs increase as the project
    evolves.",
  url = {/pub/measuring-the-occurrence-of-security-related-bugs-through-software-evolution.pdf}
}

@inproceedings{GS12,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = { {MSR} '12: Proceedings of the 9th Working Conference on Mining Software Repositories},
  Editor = {Michael W. Godfrey and Jim Whitehead},
  Location = {Zurich, Switzerland},
  Month = jun,
  Pages = {12--21},
  Publisher = {IEEE},
  Title = { {GHT}orrent: {G}it{H}ub's Data from a Firehose},
  Year = 2012,
  doi = {10.1109/MSR.2012.6224294}, 
  ISSN = {2160-1852},
  SlideshareEmbed = "13184524",
  abstract = {A common requirement of many empirical software engineering studies is the acquisition and curation of data from software repositories. During the last few years, GitHub has emerged as a popular project hosting, mirroring and collaboration platform. GitHub provides an extensive REST API, which enables researchers to retrieve both the commits to the projects’ repositories and events generated through user actions on project resources. GHTorrent aims to create a scalable off line mirror of GitHub’s event streams and persistent data, and offer it to the research community as a service. In this paper, we present the project’s design and initial implementation and demonstrate how the provided datasets can be queried and processed.},
  url = {/pub/ghtorrent-githubs-data-from-a-firehose.pdf}
}

@inproceedings{KGSP09,
  Author = {Eirini Kalliamvakou and Georgios Gousios and Diomidis Spinellis and Nancy Pouloudi},
  Booktitle = {MCIS 2009: 4th {M}editerranean Conference on Information Systems},
  Editor = {Poulymenakou, A. and Pouloudi, N. and Pramatari, K.},
  Location = {Athens, Greece},
  Month = sep,
  Pages = {600--611},
  Title = {Measuring Developer Contribution from Software Repository Data},
  Year = 2009,
  abstract = {Our work is concerned with an enriched perspective of what constitutes developer contribution in software infrastructures supporting incremental development and distributed software projects. We use the term “contribution” to express the combination of all the actions a developer has performed during the development process and propose a model for calculating this individually for developers participating in a software project. Our approach departs from the traditional practice of only measuring the contribution to the final outcome (the code) and puts emphasis additionally on other activities that do not directly affect the product itself but are essential to the development process. We use the Open Source Software (OSS) context to take advantage of the public availability of data in software repositories. In this paper, we present our method of calculation and its system implementation and we apply our measurements on various projects from the GNOME ecosystem.},
  Url = {/pub/measuring-developer-contribution-from-software-repository-data.pdf}
}

@inproceedings{GS09a,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = { {ICSE} '09: Proceedings of the 31st International Conference on Software Engineering -- Formal Research Demonstrations Track},
  Day = {16--24},
  Isbn = {978-1-4244-3743-6},
  Location = {Vancouver, Canada},
  Month = may,
  Pages = {579--582},
  Publisher = {IEEE},
  Title = {Alitheia Core: An extensible software quality monitoring platform},
  Year = {2009},
  abstract = {Research in the fields of software quality and maintain- ability requires the analysis of large quantities of data, which often originate from open source software projects. Pre-processing data, calculating metrics, and synthesizing composite results from a large corpus of project artefacts is a tedious and error prone task lacking direct scientific value. The Alitheia Core tool is an extensible platform for software quality analysis that is designed specifically to fa- cilitate software engineering research on large and diverse data sources, by integrating data collection and preprocess- ing phases with an array of analysis services, and present- ing the researcher with an easy to use extension mechanism. The system has been used to process several projects suc- cessfully, forming the basis of an emerging ecosystem of quality analysis tools.},
  url = {/pub/alitheia-core-extensible-software-quality-monitoring-platform.pdf}
}

@inproceedings{GS09b,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = { {MSR} '09: Proceedings of the 6th Working Conference on Mining Software Repositories},
  Day = {16--17},
  Editor = {Michael W. Godfrey and Jim Whitehead},
  Isbn = {978-1-4244-3493-0},
  Location = {Vancouver, Canada},
  Month = may,
  Pages = {31--40},
  Publisher = {IEEE},
  Title = {A platform for software engineering research},
  Year = 2009,
  abstract = {Research in the fields of software quality, maintainabil- ity and evolution requires the analysis of large quantities of data, which often originate from open source software projects. Collecting and preprocessing data, calculating metrics, and synthesizing composite results from a large corpus of project artifacts is a tedious and error prone task lacking direct scientific value. The Alitheia Core tool is an extensible platform for software quality analysis that is designed specifically to facilitate software engineering research on large and diverse data sources, by integrating data collection and preprocessing phases with an array of analysis services, and presenting the researcher with an easy to use extension mechanism. Alitheia Core aims to be the basis of an ecosystem of shared tools and research data that will enable researchers to focus on their research questions at hand, rather than spend time on re-implementing analysis tools.

    In this paper, we present the Alitheia Core platform in detail and demonstrate its usefulness in mining software repositories by guiding the reader through the steps required to execute a simple experiment.},
  url = {/pub/a-platform-for-software-engineering-research.pdf}
}

@inproceedings{GS08,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = {Proceedings of the 12th Pan-Hellenic Conference on Informatics},
  Title = {Java Performance Evaluation Using External Instrumentation},
  Year = 2008,
  Location = {Samos, Greece},
  Month = {August},
  abstact = {The performance of programs written in the Java pro- gramming language is not trivial to analyse. The Java Vir- tual Machine hides the details of bytecode execution while not providing an accessible profiling mechanism. Most tools used for Java performance evaluations are based on sampling and only present engineers with sampled data aggregations. In this paper, we present the Java DTrace Toolkit, a collection of scripts that is specifically designed to assist engineers in identifying the roots of various perfor- mance problems observed with other tools.},
  url = {/pub/java-performance-evaluation-using-external-instrumentation.pdf}
}

@inproceedings{SGSS08,
  Address = {Boston},
  Author = {Ioannis Samoladas and Georgios Gousios and Diomidis Spinellis and Ioannis Stamelos},
  Booktitle = {Open Source Development, Communities and Quality --- {OSS} 2008: 4th International Conference on Open Source Systems},
  Editor = {Ernesto Damiani and Giancarlo Succi},
  Location = {Milan, Italy},
  Month = sep,
  Organization = {IFIP 20th World Computer Congress, Working Group 2.3 on Open Source Software},
  Pages = {237--248},
  Publisher = {Springer},
  Title = {The {SQO-OSS} Quality Model: Measurement Based Open Source Software Evaluation},
  Year = {2008},
  abstract = {Software quality evaluation has always been an important part of software business. The quality evaluation process is usually based on hierarchical quality models that measure various aspects of software quality and deduce a characterization of the product quality being evaluated. The particular nature of open source software has rendered existing models unsuitable for detailed quality evaluations. In this paper, we present a hierarchical quality model that evaluates source code and community processes, based on automatic calculation of metric values and correlation of those to a set of predefined quality profiles.},
  url = {/pub/sqo-oss-quality-model-measurement-based-open-source-software-evaluation.pdf}
}

@inproceedings{GKS08,
  Address = {New York, NY, USA},
  Author = {Georgios Gousios and Eirini Kalliamvakou and Diomidis Spinellis},
  Booktitle = {MSR '08: Proceedings of the 2008 International Working Conference on Mining Software Repositories},
  Isbn = {978-1-60558-024-1},
  Location = {Leipzig, Germany},
  Pages = {129--132},
  Publisher = {ACM},
  Title = {Measuring developer contribution from software repository data},
  Year = {2008},
  abstract = {Apart from source code, software infrastructures supporting agile and distributed software projects contain traces of developer activity that does not directly affect the product itself but is important for the development process. We propose a model that, by combining traditional contribution metrics with data mined from software repositories, can deliver accurate developer contribution measurements. The model creates clusters of similar projects to extract weights that are then applied to the actions a developer performed on project assets to extract a combined measurement of the developer’s contribution. We are currently implementing the model in the context of a software quality monitoring system while we are also validating its components by means of questionnaires.},
  url = {/pub/measuring-developer-contribution-from-repository-data.pdf}
}

@inproceedings{G07,
  Author = {Georgios Gousios},
  Booktitle = {Companion to the 22nd ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications (OOPSLA)},
  Location = {Montreal, Canada},
  Month = {Oct 21-25},
  Title = {The {J}ikes{X}en {J}ava Server Platform},
  Year = {2007},
  url = {/pub/jikesxen.pdf},
  abstract = {The purpose of the JVM is to abstract the Java language from the
    hardware and software platforms it runs on. For this rea- son, the JVM uses
      services offered by the host operating sys- tem in order to implement
      identical services for the Java lan- guage. The obvious duplication of effort
      in service provision and resource management between the JVM and the operat-
      ing system has a measurable cost on the performance of Java programs. In my
      PhD research, I try to find ways of min- imizing the cost of sharing resources
      between the OS and the JVM, by identifying and removing unnecessary software
      layers.}
}

@inproceedings{GKSLVS07,
  Author = {Georgios Gousios and Vassilios Karakoidas and Konstantinos Stroggylos and Panagiotis Louridas and Vasileios Vlachos and Diomidis Spinellis},
  Booktitle = {Proceedings of the 11th Panhellenic Conference on Informatics},
  Day = {18--20},
  Location = {Patras, Greece},
  Month = may,
  Title = {Software Quality Assessment of Open Source Software},
  Year = {2007},
  abstract = {The open source software ecosystem comprises more than a hundred thousand applications of varying quality. Individuals and organizations wishing to use open source software packages have scarce objective data to evaluate their quality. However, open source development projects by definition allow anybody to read, and therefore evaluate their source code. In addition, most projects also publish process-related artefacts, such as bug databases, mailing lists, and configuration management system logs. The software quality observatory is a platform that uses these product and process data sources to automatically evaluate the quality of open source projects. A plugin-based service-oriented architecture allows the mixing and matching of metrics extraction suites, source code repositories, and transformation filters. The resulting platform is aimed at IT consultants and managers, the open source community, and researchers.},
  url = {/pub/software-quality-assessment-of-open-source-software.pdf}
}

@inproceedings{GKS06,
  Author = {Georgios Gousios and Vassilios Karakoidas and Diomidis Spinellis},
  Booktitle = {Proceedings of the 5th International System Administration and Network Engineering Conference SANE 06},
  Day = {18--19},
  Editor = {Alexios Zavras},
  Location = {Delft, The Netherlands},
  Month = may,
  Organization = {NLUUG},
  Pages = {69--83},
  Publisher = {Stichting SANE},
  Title = {Tuning {J}ava's memory manager for high performance server applications},
  Year = {2006},
  Url = {/pub/paper.pdf},
  abstract = {Java is a strong player in the application server market and thus the performance of its virtual machine is an important aspect of a server's performance. One of the components that affect the performance of a {\sc jvm} is the memory manager, which also includes the garbage collector. Modern virtual machines offer a multitude of options for tuning the memory manager, which can have a significant impact on server application performance. 

    In this paper, we examine the effect of tuning the garbage collection in an application server environment. By employing both synthetic and real world application benchmarks, we assess the various garbage collection strategies offered by two popular virtual machines. Finally, we present a comprehensive list of generally applicable garbage collection guidelines.}
}

@inproceedings{GS02,
  Author = {Georgios Gousios and Diomidis Spinellis},
  Booktitle = {Proceedings of the 3rd International System Administration and Networking Conference {SANE 2002}},
  Location = {Maastricht, The Netherlands},
  Month = may,
  Note = {Best refereed paper award},
  Pages = {103--119},
  Title = {A Comparison of Portable Dynamic Web Content Technologies for the Apache Web Server},
  Year = 2002,
  award = {SANE2002: Best refereed paper award},
  url = {/pub/comparison-of-portable-dynamic-web-content-technology-apache.pdf}
}
