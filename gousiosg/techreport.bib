%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Georgios Gousios at 2014-11-17 21:05:16 +0100 


%% Saved with string encoding Unicode (UTF-8) 

@techreport{GB15,
	Author = {Gousios Georgios and Alberto Bacchelli},
	Institution = {Radboud University Nijmegen},
	Month = {March},
	Number = {ICIS--R15001},
	Title = {Work Practices and Challenges in Pull--Based Development: The Contributor`s Perspective},
	Type = {Internal Report},
  URL = {/pub/pullreq-contrib-tr.pdf},
Year = {2014},
  code			= {icis.ICIS-R15001},
  research_group	= {ds}
}

@techreport{GZSD14,
	Author = {Gousios, Georgios and Zaidman, Andy and Storey, Margaret-Anne and Van Deursen, Arie},
	Institution = {Delft University of Technology, Software Engineering Research Group},
	Month = {Sep},
	Number = {TUD-SERG-2014-013},
	Title = {Work practices and challenges in pull-based development: the integrator's perspective},
	Type = {Internal Report},
  URL = {http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2014-013.pdf},
	Year = {2014}}

@techreport{Gousi07,
	Abstract = {The purpose of the jvm is to abstract the Java language from the hardware and software platforms it runs on. Currently, there is an obvious duplication of effort in service provision and resource management between the JVM and the operating system that has a measurable cost on the performance of Java programs. The emergence of efficient hardware resource virtualisation mechanisms presents implementers with new opportunities for optimising the Java software execution stack.

In this paper, we examine the sources of the runtime overhead imposed on the Java programming language by the native execution environment. We use both synthetic and real world applications as benchmarks along with modern instrumentation tools to measure this overhead. We base our measurements on the assumption that the jvm can be directly hosted on virtualised hardware. Based on our findings, we also propose a cost estimation heuristic, which allows us to estimate the minimal gain to be expected when applications will be moved to hypervisor-hosted virtual machines.},
	Author = {Georgios Gousios},
	Institution = {Athens University of Economics and Business},
	Month = {Jan},
	Title = {Rethinking the Java software stack: Optimisation opportunities in the face of hardware resource virtualisation},
	Url = {/pub/java-optimisation-opportunities-hardware-resource-virtualisation.pdf},
	Year = {2007},
	Bdsk-Url-1 = {/pub/java-optimisation-opportunities-hardware-resource-virtualisation.pdf}}

@techreport{Gousi11,
	Abstract = {A new trend in programming languages and system design is the use of constructs derived from the functional language field. Startups requiring fast product turnover and large corporations looking for increased maintainability are exploring the use of new, purely functional (such as Erlang or Haskell) or functionally-enabled (such as Scala and Ruby) languages, on the basis of decreased complexity and higher productivity. Despite the apparent increase in their use, the soft- ware engineering properties, including the alleged advantages, of such languages are largely underexplored. In this paper, we discuss the issues that prohibit the use of classic complexity and productivity metrics and present the rationale behind a new set of metrics that targets this increasingly important set of languages.},
	Author = {Georgios Gousios},
	Institution = {Athens University of Economics and Business},
	Month = {Jan},
	Title = {Software engineering properties of functionally enabled languages},
	Url = {/pub/softeng-functional.pdf},
	Year = {2011},
	Bdsk-Url-1 = {/pub/softeng-functional.pdf}}
